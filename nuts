#!/bin/bash

# ENV VARIABLES ###############################################################

# Test notes path
NOTES_PATH="$HOME/code/nuts/notes"
# NOTES_PATH="$HOME/shared/notes"
NOTES_BASENAME=$(basename "$NOTES_PATH")

ROOT=$(realpath "$(dirname "$0")")

FILES=$(find "$NOTES_PATH" ! -name "$NOTES_BASENAME" -type f -printf "%P\n")
DIRS=$(find "$NOTES_PATH" ! -name "$NOTES_BASENAME" -type d -printf "%P\n")
# DIRS_AND_FILES=$(find "$NOTES_PATH" ! -name "$NOTES_BASENAME" -type d -printf "%P/\n" -o -type f -printf "%P\n")

TERM_WIDTH=$(tput cols)
# TERM_HEIGHT=$(tput lines)

# UTILITY FUNCTIONS ###########################################################

# Prints help and exit
usage_and_exit() {
    echo 'Usage:'
    echo "  $0                          search any note"
    echo "  $0 new|add <name>           create a note with optionnal name"
    echo "  $0 find|search <query>      search for a note with optionnal query, opens it if only 1 found, else opens the search with query"
    echo "  $0 edit|open <query>        edit a note with default text editor"
    echo "  $0 delete|remove <query>    delete a note"
    echo "  $0 help|-h|--help           show this help"
    echo "  $0 <query>                  like 'find', for any query that doesn't match any other possible parameter"
    exit
}

error_and_exit() {
    >&2 echo -e "Error: $1"
    exit
}

no_note_error() {
    local msg="\tNo note in $NOTES_PATH
    \tChange NOTE_PATH value or try 'new' argument to create a new note"
    error_and_exit "$msg"
}

open_in_editor() {
    [ -z "$EDITOR" ] && error_and_exit "EDITOR environment variable is not set."

    case "$EDITOR" in
      nvim | vim) $EDITOR -c "cd $NOTES_PATH" -c "e $1";;
      *) $EDITOR "$1";;
    esac
}

# FIND & DISPLAY NOTE #########################################################

# Format the note to not exceed colwidth, and renders markdown
format_note() {
    # TODO: interpret markdown (ruby script ?)
    fmt -s -w "$colwidth" < "$1"
}

# Without arg:  opens fzf to search for any note and prints selection
# With arg:     if only one match, prints the note, else opens fzf with query
find_note() {
    local selection colwidth query
    [ -n "$1" ] && query=$1

    selection=$NOTES_PATH/$(fzf --query "$query" -1 --border=top <<< "$FILES")
    echo "$selection"
}

display_note() {
    local colwidth formatted note
    note=$(find_note "$1")
    echo "$note" > "$ROOT/lastopened"
    # file_date=$(date -r "$selection" "+%Y-%m-%d %H:%M")
    colwidth=$(("$TERM_WIDTH" / 2 - 4))

    formatted=$(format_note "$note")
    echo "$formatted"
}

# NEW NOTE ####################################################################

create_note_dir() {
    # ask user for a dir name, with completion from NOTES_PATH
    local basedir=$PWD
    cd "$NOTES_PATH" || exit
    read -e -p "New directory name (relative path): " new_dir
    cd "$basedir" || exit
    
    # TODO: Check if newdir is valid:
        # - not a file
        # - doesn't already exist
        # - name not blank (?)

    # create dir recursively
    mkdir -p "$NOTES_PATH/$new_dir"
    
    selection="$new_dir"
}

select_or_create_dir() {
    local fzf_prompt="Select a directory > "
    local new=">> Create a new directory..."
    local selection options
    # Add "create a new dir" and "." to notes directories list
    options=$(printf "%s\n%s\n%s" "$new" "." "$DIRS")

    selection=$(fzf --border=top --prompt="$fzf_prompt" <<< "$options")
    # if "create a new dir" selected
    [ "$selection" == "$new" ] && create_note_dir

    selection="$NOTES_PATH/$selection"
    echo "$selection"
}

ask_new_note_name() {
    local name
    read -p "New note name > " name

    # TODO: check if name is valid:
        # - not empty
    echo "$name"
}

# Let the user choose for a directory in NOTES_PATH,
# then prompt the user for a filename & opens default editor
new_note() {
    local new_note_dir new_note_name new_note_path
    new_note_dir=$(select_or_create_dir)
    # echo "new note dir: $new_note_dir"
    # name is $1 if set, else ask
    new_note_name=${1:-$(ask_new_note_name)}
    # append ".md" to new_note_name if not already present
    new_note_name="${new_note_name%.md}.md" 
    # echo "new note name: $new_note_dir$new_note_name"

    new_note_path="$new_note_dir/$new_note_name"
    touch "$new_note_path"
    # open file with default text editor
    open_in_editor "$new_note_path"
}

# DELETE ######################################################################

# Checks a note's parent dir on note deletion.
# If parent dir is NOTES_PATH or is not empty, do nothing
# else ask to delete the empty dir.
check_parent_dir() {
    local note_dir confirm
    note_dir=$(dirname "$note")
    [[ $note_dir == "$NOTES_PATH" || -n "$(ls -A "$note_dir")" ]] && return

    echo "The note's parent dir is now empty: $note_dir"
    read -p "Remove it too ? (y/N) > " confirm
    if [[ "$confirm" == [Yy] ]]; then
        rm -r "$note_dir" && echo "Directory deleted."
    else
        echo "Skipped empty directory deletion."
    fi
}

delete_note() {
    local note confirm

    note=$(find_note "$1")
    echo "This file will be deleted: $note"
    read -p "Are you sure ? (y/N) > " confirm
    if [[ "$confirm" == [Yy] ]]; then
        rm "$note" && echo "File deleted."
        # if parent dir is empty and is not NOTE_PATH, ask to remove it also
        check_parent_dir
    else
        echo "Aborted."
    fi
}

# EDIT ########################################################################

edit_note() {
    local note

    note=$(find_note "$1")
    open_in_editor "$note"
}

# ENTRY POINT #################################################################

[ -n "$3" ] && echo "Unknown parameter: $3" && usage_and_exit

case $1 in
    "" | find | search)
        [ -z "$FILES" ] && no_note_error
        display_note "$2"
        ;;
    new | add) new_note "$2";;
    edit | open)
        [ -z "$FILES" ] && no_note_error
        edit_note "$2";;
    remove | delete)
        [ -z "$FILES" ] && no_note_error
        delete_note "$2";;
    help | -h | --help)
        usage_and_exit;;
    *)
        [ -z "$FILES" ] && no_note_error
        display_note "$1"
        ;;
esac

# I DON'T KNOW YET BUT I THOUGHT IT COULD BE COOL #############################

# lines_count=$(wc -l <<< "$formatted_file")

# echo $lines_count, $TERM_HEIGHT

# if (("$lines_count" > "$TERM_HEIGHT" - 1)); then
#     pr --columns 2 -w "$TERM_WIDTH" -l "$TERM_HEIGHT" -D "Last modified: $file_date" <<< "$formatted_file"
# else
#     echo "$formatted_file"
# fi
